title Login Process
  participant "Client" as Client
  participant LoginServlet
  participant "DAO(s)" as DbManager
  participant PasswordUtils
  participant Session
  participant AuthStatusServlet

  Client->>LoginServlet: POST /login (username, password)
  LoginServlet->>DbManager: getUtente(username)
  alt Success
      LoginServlet->>PasswordUtils: verifyPassword(password, passwordHash)
      alt Password valid
          LoginServlet->>Session: setAttribute("user", utente)
          LoginServlet->>Session: setAttribute("isLoggedIn", true)
          LoginServlet-->>Client: Redirect to /index.html
          Client->>Client: App.init()
          Client->>AuthStatusServlet: GET /auth/status
          AuthStatusServlet->>Session: getAttribute("user")
          Session-->>AuthStatusServlet: Return user object
          AuthStatusServlet-->>Client: Return user data
  Client->>Client: Determine initial route
  alt First visit or route check
      Client->>Client: Check cookies (primaVisita, ultimaAzione)
      Client->>Client: Set appropriate defaultRoute based on cookie values
  end
  Client->>Client: navigateTo(determinedRoute)
      else Invalid credentials
          LoginServlet-->>Client: Forward to login.jsp with error
      end
  else Error or user not found
      DbManager-->>LoginServlet: SQLException or null
      LoginServlet-->>Client: Forward to login.jsp with error
  end

    title Logout Process
    participant "Client" as Client
    participant LogoutServlet
    participant Session
    Client->>LogoutServlet: GET /logout
    LogoutServlet->>LogoutServlet: request.getSession(false)
    alt Session exists
        LogoutServlet->>Session: invalidate()
        Session-->>LogoutServlet: Session terminated
    else Session doesn't exist
        note over LogoutServlet: No action needed
    end
    LogoutServlet-->>Client: Redirect to /login.jsp
    Client->>Client: Display login page


  title Load ricercaAste Page
  participant "Client" as Client
  participant RicercaAstePage
  participant "AuthStatusServlet" as API
  participant AcquistoServlet
  participant "DAO(s)" as DbManager
  Client->>API: GET /auth/status
  alt User is logged in
    API-->>Client: Return user data (null if not found)
  else User is not logged in
   API-->>Client: Return userdata = null
   end
  RicercaAstePage->>RicercaAstePage: loadData(parolaChiave)
  RicercaAstePage->>API: GET /acquisto with params
  API->>AcquistoServlet: GET request
  AcquistoServlet->>AcquistoServlet: Extract parolaChiave parameter
  alt User is logged in
      AcquistoServlet->>DbManager: getAstePerParolaChiave(parolaChiave, now)
      AcquistoServlet->>DbManager: getAsteVinteDaUtente(username)
      AcquistoServlet->>AcquistoServlet: Process asteVisitate from cookies
      AcquistoServlet-->>API: Return JSON {asteAperte, asteAggiudicate, asteVisitate}
  else User not logged in
      AcquistoServlet->>DbManager: getAstePerParolaChiave(parolaChiave, now)
      AcquistoServlet-->>API: Return JSON {asteAperte}
  end
  API-->>RicercaAstePage: Return processed data
  RicercaAstePage->>RicercaAstePage: Prepare page
  RicercaAstePage-->>Client: Display auctions page


title View Auction Details Flow
participant "Client" as Client
participant "OffertaPage" as OffertaPage
participant "OffertaApiServlet" as API
participant "DAO(s)" as DB

Client->>OffertaPage: navigateTo('offerta', {id: astaId})

OffertaPage->>API: GET /api/offerta?id=astaId

API->>DB: getAstaById(astaId)

API-->>OffertaPage: Return JSON {asta: astaObject}


alt User is logged in
    OffertaPage->>OffertaPage: registraAstaVisitata(astaId, username)
    OffertaPage->>OffertaPage: Update asteVisitate cookie
end

alt User is logged in AND NOT auction.chiusa AND user != auction.venditore

    OffertaPage->>OffertaPage: Setup bid form with minimum offer validation
    OffertaPage->>OffertaPage: Attach submit event handler
else Auction is closed
    OffertaPage->>OffertaPage: Display "Quest'asta Ã¨ chiusa" message
else User is not logged in
    OffertaPage->>OffertaPage: Display "Accedi per fare un'offerta" message
else User is the seller
    OffertaPage->>OffertaPage: Display "Non puoi fare offerte sulla tua stessa asta" message
end

OffertaPage->>OffertaPage: Render auction details, articles and offers table
OffertaPage-->>Client: Display complete auction page

title Submit Auction Bid Flow
participant "User" as User
participant "OffertaPage" as OffertaPage
participant "API+OffertaApiServlet" as ApiServlet
participant "DAO(s)" as DB
participant "Session" as Session

User->>OffertaPage: Submit bid form with price

OffertaPage->>ApiServlet: API.post('/offerta', formData)

ApiServlet->>Session: getAttribute("user")
Session-->>ApiServlet: Return user object

alt Success path

    ApiServlet->>DB: getAstaById(astaId)
    DB-->>ApiServlet: Return Asta object

    ApiServlet->>DB: registraOfferta(astaId, offerta)
    DB-->>ApiServlet: Success
    ApiServlet-->>OffertaPage: Return success JSON

    OffertaPage->>ApiServlet: API.get('/offerta?id=astaId')
    ApiServlet->>DB: getAstaById(astaId)

    ApiServlet-->>OffertaPage: Return updated auction data
    OffertaPage->>OffertaPage: render(astaId)
    OffertaPage-->>User: Display updated auction page with new bid
else Error conditions (400/401)

    note over ApiServlet: 400: Invalid parameters, price too low, DB error || 401: User not authenticated

    ApiServlet->>ApiServlet: Add appropriate error message to errors list

    ApiServlet-->>OffertaPage: Return error response with messages

    OffertaPage-->>User: Display appropriate error message
end

title Load GestioneAste Page
  participant "Client" as Client
  participant GestioneAstePage
  participant "API+VendoServlet" as ApiServlet
  participant "DAO(s)r" as DB
  participant "Session" as Session

  Client->>GestioneAstePage: navigateTo('gestioneAste')

  GestioneAstePage->>ApiServlet: API.get('/vendo')

  ApiServlet->>Session: getAttribute("user")


  alt User is logged in
      ApiServlet->>DB: getArticoliDisponibiliPerUtente(username)

      ApiServlet->>DB: getAsteUtente(username, false)

      ApiServlet->>DB: getAsteUtente(username, true)
      ApiServlet-->>GestioneAstePage: Return JSON {articoliUtente, asteAperte, asteChiuse}
  else User not logged in
      ApiServlet-->>GestioneAstePage: Return 401 Unauthorized
      GestioneAstePage-->>Client: Send error

  end

  GestioneAstePage-->>Client: Display auction management page

title Create New Article Flow
participant "Client" as Client
participant "GestioneAstePage" as GestionePage
participant "VendoServlet" as ApiServlet
participant "DAO(s)" as DB
participant "Session" as Session

Client->>GestionePage: Submit article form


GestionePage->>ApiServlet: API.post('/vendo', formData)
ApiServlet->>Session: getAttribute("user")
Session-->>ApiServlet: Return user object

alt Success Path

    ApiServlet->>DB: inserisciArticolo(nome, descrizione, imageStream, prezzo, venditore)

    ApiServlet-->>GestionePage: Return success response
    GestionePage->>ApiServlet: API.get('/vendo')
    ApiServlet->>DB: getArticoliDisponibiliPerUtente(username)

    ApiServlet->>DB: getAsteUtente(username, false)

    ApiServlet->>DB: getAsteUtente(username, true)

    ApiServlet-->>GestionePage: Return updated data

    GestionePage-->>Client: Display updated page with new article
else Error Conditions
    note over ApiServlet: Possible errors: Db failure, form error, user not logged on
    ApiServlet-->>GestionePage: Return error response
    GestionePage-->>Client: Display error message
end

title Add New Auction Flow
participant "User" as User
participant "GestioneAstePage" as GestioneAstePage
participant "API+VendoServlet" as ApiServlet
participant "DAO(s)" as DB
participant "Session" as Session

User->>GestioneAstePage: Submit form

GestioneAstePage->>ApiServlet: API.post('/vendo', formData)

ApiServlet->>Session: getAttribute("user")


alt Success Path

    ApiServlet->>DB: Get prices for all selected articles
    ApiServlet->>DB: inserisciAsta(asta)
    ApiServlet-->>GestioneAstePage: Return success response
    GestioneAstePage->>ApiServlet: API.get('/vendo')
    ApiServlet->>DB: getArticoliDisponibiliPerUtente(username)
    ApiServlet->>DB: getAsteUtente(username, false)
    ApiServlet->>DB: getAsteUtente(username, true)
    ApiServlet-->>GestioneAstePage: Return updated data
    GestioneAstePage-->>User: Display updated page with new auction
else Error Conditions
    note over ApiServlet: Possible errors: 401: User not authenticated || 400: Form error(s) || 500: Database error
    ApiServlet->>ApiServlet: Identify error type and add to errors list
    ApiServlet-->>GestioneAstePage: Return error response with messages
    GestioneAstePage-->>User: Display appropriate error message
end

title View Own Auction Details Flow (DettaglioAsta)
participant "Client" as Client
participant "DettaglioAstaPage" as DetailPage
participant "API+DettaglioAstaApiServlet" as ApiServlet
participant "DAO(s)" as DB
participant "Session" as Session

Client->>DetailPage: navigateTo('dettaglioAsta', {id: astaId})
DetailPage->>ApiServlet: API.get('/dettaglioAsta', {id: astaId})
ApiServlet->>Session: getAttribute("user")
Session-->>ApiServlet: Return user object

alt Success Path

    ApiServlet->>DB: getAstaById(astaId)

    ApiServlet->>ApiServlet: Check if user.username == asta.venditore

    alt Auction has winning offer
        ApiServlet->>DB: getUtente(asta.getOffertaVincitrice().getUsername())

        ApiServlet->>ApiServlet: Add winner to result
    end

    ApiServlet-->>DetailPage: Return JSON with asta and winner info
    DetailPage->>Client: Check current user (App.getCurrentUser())
    Client-->>DetailPage: Return current user
    DetailPage->>DetailPage: Set isVenditore flag

    DetailPage->>DetailPage: Prepare page

    alt Auction is closed and has winner
        DetailPage->>DetailPage: Add winner section to HTML
    end

    alt User is seller and auction is open
        DetailPage->>DetailPage: Add "Close Auction" form to HTML
    end

    DetailPage-->>Client: Display complete auction details page

else Error Conditions
    note over ApiServlet: Possible errors: User not authenticated || User is not the seller || Invalid auction ID || Auction not found || Database errors
    ApiServlet->>ApiServlet: Set appropriate status code and error message
    ApiServlet-->>DetailPage: Return error response
    DetailPage->>DetailPage: Show "Asta non trovata o non visualizzabile"
    DetailPage-->>Client: Display error message
end


title Close Auction Flow
participant "User" as User
participant "DettaglioAstaPage" as DetailPage
participant "API+DettaglioAstaApiServlet" as ApiServlet
participant "DbManager" as DB
participant "Session" as Session

User->>DetailPage: Click "Chiudi Asta" button
DetailPage->>DetailPage: Display confirmation dialog
alt User cancels
    DetailPage-->>User: Close dialog, no action taken
else User confirms

    DetailPage->>ApiServlet: API.post('/dettaglioAsta', formData)

    ApiServlet->>Session: getAttribute("user")


    alt Success Path

        ApiServlet->>DB: chiudiAsta(astaId, aggiudicatario)

        ApiServlet->>DB: getAstaById(astaId)


        alt Auction has winning offer
            ApiServlet->>DB: getUtente(asta.getOffertaVincitrice().getUsername())

            ApiServlet->>ApiServlet: Add winner to result
        end

        ApiServlet-->>DetailPage: Return success response
        DetailPage->>DetailPage: Prepare page
        DetailPage-->>User: Display updated auction details page
    else Error Conditions
        note over ApiServlet: Possible errors: User not authenticated || User is not the seller || Invalid auction ID || Missing aggiudicatario || Database errors

        ApiServlet-->>DetailPage: Return error response

        DetailPage-->>User: Display appropriate error message
    end
end